// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JWTAudienceSecret is an object representing the database table.
type JWTAudienceSecret struct { // JWT audience secret 아이디
	JWTAudienceSecretID int `boil:"jwt_audience_secret_id" json:"jwt_audience_secret_id" toml:"jwt_audience_secret_id" yaml:"jwt_audience_secret_id"`
	// JWT audience
	Audience string `boil:"audience" json:"audience" toml:"audience" yaml:"audience"`
	// secret
	Secret    string    `boil:"secret" json:"secret" toml:"secret" yaml:"secret"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *jwtAudienceSecretR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jwtAudienceSecretL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JWTAudienceSecretColumns = struct {
	JWTAudienceSecretID string
	Audience            string
	Secret              string
	CreatedAt           string
	UpdatedAt           string
}{
	JWTAudienceSecretID: "jwt_audience_secret_id",
	Audience:            "audience",
	Secret:              "secret",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

var JWTAudienceSecretTableColumns = struct {
	JWTAudienceSecretID string
	Audience            string
	Secret              string
	CreatedAt           string
	UpdatedAt           string
}{
	JWTAudienceSecretID: "jwt_audience_secret.jwt_audience_secret_id",
	Audience:            "jwt_audience_secret.audience",
	Secret:              "jwt_audience_secret.secret",
	CreatedAt:           "jwt_audience_secret.created_at",
	UpdatedAt:           "jwt_audience_secret.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var JWTAudienceSecretWhere = struct {
	JWTAudienceSecretID whereHelperint
	Audience            whereHelperstring
	Secret              whereHelperstring
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	JWTAudienceSecretID: whereHelperint{field: "`jwt_audience_secret`.`jwt_audience_secret_id`"},
	Audience:            whereHelperstring{field: "`jwt_audience_secret`.`audience`"},
	Secret:              whereHelperstring{field: "`jwt_audience_secret`.`secret`"},
	CreatedAt:           whereHelpertime_Time{field: "`jwt_audience_secret`.`created_at`"},
	UpdatedAt:           whereHelpertime_Time{field: "`jwt_audience_secret`.`updated_at`"},
}

// JWTAudienceSecretRels is where relationship names are stored.
var JWTAudienceSecretRels = struct {
}{}

// jwtAudienceSecretR is where relationships are stored.
type jwtAudienceSecretR struct {
}

// NewStruct creates a new relationship struct
func (*jwtAudienceSecretR) NewStruct() *jwtAudienceSecretR {
	return &jwtAudienceSecretR{}
}

// jwtAudienceSecretL is where Load methods for each relationship are stored.
type jwtAudienceSecretL struct{}

var (
	jwtAudienceSecretAllColumns            = []string{"jwt_audience_secret_id", "audience", "secret", "created_at", "updated_at"}
	jwtAudienceSecretColumnsWithoutDefault = []string{"audience", "secret"}
	jwtAudienceSecretColumnsWithDefault    = []string{"jwt_audience_secret_id", "created_at", "updated_at"}
	jwtAudienceSecretPrimaryKeyColumns     = []string{"jwt_audience_secret_id"}
)

type (
	// JWTAudienceSecretSlice is an alias for a slice of pointers to JWTAudienceSecret.
	// This should almost always be used instead of []JWTAudienceSecret.
	JWTAudienceSecretSlice []*JWTAudienceSecret
	// JWTAudienceSecretHook is the signature for custom JWTAudienceSecret hook methods
	JWTAudienceSecretHook func(context.Context, boil.ContextExecutor, *JWTAudienceSecret) error

	jwtAudienceSecretQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jwtAudienceSecretType                 = reflect.TypeOf(&JWTAudienceSecret{})
	jwtAudienceSecretMapping              = queries.MakeStructMapping(jwtAudienceSecretType)
	jwtAudienceSecretPrimaryKeyMapping, _ = queries.BindMapping(jwtAudienceSecretType, jwtAudienceSecretMapping, jwtAudienceSecretPrimaryKeyColumns)
	jwtAudienceSecretInsertCacheMut       sync.RWMutex
	jwtAudienceSecretInsertCache          = make(map[string]insertCache)
	jwtAudienceSecretUpdateCacheMut       sync.RWMutex
	jwtAudienceSecretUpdateCache          = make(map[string]updateCache)
	jwtAudienceSecretUpsertCacheMut       sync.RWMutex
	jwtAudienceSecretUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jwtAudienceSecretBeforeInsertHooks []JWTAudienceSecretHook
var jwtAudienceSecretBeforeUpdateHooks []JWTAudienceSecretHook
var jwtAudienceSecretBeforeDeleteHooks []JWTAudienceSecretHook
var jwtAudienceSecretBeforeUpsertHooks []JWTAudienceSecretHook

var jwtAudienceSecretAfterInsertHooks []JWTAudienceSecretHook
var jwtAudienceSecretAfterSelectHooks []JWTAudienceSecretHook
var jwtAudienceSecretAfterUpdateHooks []JWTAudienceSecretHook
var jwtAudienceSecretAfterDeleteHooks []JWTAudienceSecretHook
var jwtAudienceSecretAfterUpsertHooks []JWTAudienceSecretHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JWTAudienceSecret) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JWTAudienceSecret) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JWTAudienceSecret) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JWTAudienceSecret) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JWTAudienceSecret) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JWTAudienceSecret) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JWTAudienceSecret) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JWTAudienceSecret) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JWTAudienceSecret) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtAudienceSecretAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJWTAudienceSecretHook registers your hook function for all future operations.
func AddJWTAudienceSecretHook(hookPoint boil.HookPoint, jwtAudienceSecretHook JWTAudienceSecretHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		jwtAudienceSecretBeforeInsertHooks = append(jwtAudienceSecretBeforeInsertHooks, jwtAudienceSecretHook)
	case boil.BeforeUpdateHook:
		jwtAudienceSecretBeforeUpdateHooks = append(jwtAudienceSecretBeforeUpdateHooks, jwtAudienceSecretHook)
	case boil.BeforeDeleteHook:
		jwtAudienceSecretBeforeDeleteHooks = append(jwtAudienceSecretBeforeDeleteHooks, jwtAudienceSecretHook)
	case boil.BeforeUpsertHook:
		jwtAudienceSecretBeforeUpsertHooks = append(jwtAudienceSecretBeforeUpsertHooks, jwtAudienceSecretHook)
	case boil.AfterInsertHook:
		jwtAudienceSecretAfterInsertHooks = append(jwtAudienceSecretAfterInsertHooks, jwtAudienceSecretHook)
	case boil.AfterSelectHook:
		jwtAudienceSecretAfterSelectHooks = append(jwtAudienceSecretAfterSelectHooks, jwtAudienceSecretHook)
	case boil.AfterUpdateHook:
		jwtAudienceSecretAfterUpdateHooks = append(jwtAudienceSecretAfterUpdateHooks, jwtAudienceSecretHook)
	case boil.AfterDeleteHook:
		jwtAudienceSecretAfterDeleteHooks = append(jwtAudienceSecretAfterDeleteHooks, jwtAudienceSecretHook)
	case boil.AfterUpsertHook:
		jwtAudienceSecretAfterUpsertHooks = append(jwtAudienceSecretAfterUpsertHooks, jwtAudienceSecretHook)
	}
}

// One returns a single jwtAudienceSecret record from the query.
func (q jwtAudienceSecretQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JWTAudienceSecret, error) {
	o := &JWTAudienceSecret{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for jwt_audience_secret")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JWTAudienceSecret records from the query.
func (q jwtAudienceSecretQuery) All(ctx context.Context, exec boil.ContextExecutor) (JWTAudienceSecretSlice, error) {
	var o []*JWTAudienceSecret

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to JWTAudienceSecret slice")
	}

	if len(jwtAudienceSecretAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JWTAudienceSecret records in the query.
func (q jwtAudienceSecretQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count jwt_audience_secret rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jwtAudienceSecretQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if jwt_audience_secret exists")
	}

	return count > 0, nil
}

// JWTAudienceSecrets retrieves all the records using an executor.
func JWTAudienceSecrets(mods ...qm.QueryMod) jwtAudienceSecretQuery {
	mods = append(mods, qm.From("`jwt_audience_secret`"))
	return jwtAudienceSecretQuery{NewQuery(mods...)}
}

// FindJWTAudienceSecret retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJWTAudienceSecret(ctx context.Context, exec boil.ContextExecutor, jWTAudienceSecretID int, selectCols ...string) (*JWTAudienceSecret, error) {
	jwtAudienceSecretObj := &JWTAudienceSecret{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `jwt_audience_secret` where `jwt_audience_secret_id`=?", sel,
	)

	q := queries.Raw(query, jWTAudienceSecretID)

	err := q.Bind(ctx, exec, jwtAudienceSecretObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from jwt_audience_secret")
	}

	if err = jwtAudienceSecretObj.doAfterSelectHooks(ctx, exec); err != nil {
		return jwtAudienceSecretObj, err
	}

	return jwtAudienceSecretObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JWTAudienceSecret) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no jwt_audience_secret provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jwtAudienceSecretColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jwtAudienceSecretInsertCacheMut.RLock()
	cache, cached := jwtAudienceSecretInsertCache[key]
	jwtAudienceSecretInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jwtAudienceSecretAllColumns,
			jwtAudienceSecretColumnsWithDefault,
			jwtAudienceSecretColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jwtAudienceSecretType, jwtAudienceSecretMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jwtAudienceSecretType, jwtAudienceSecretMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `jwt_audience_secret` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `jwt_audience_secret` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `jwt_audience_secret` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, jwtAudienceSecretPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into jwt_audience_secret")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JWTAudienceSecretID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jwtAudienceSecretMapping["jwt_audience_secret_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.JWTAudienceSecretID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for jwt_audience_secret")
	}

CacheNoHooks:
	if !cached {
		jwtAudienceSecretInsertCacheMut.Lock()
		jwtAudienceSecretInsertCache[key] = cache
		jwtAudienceSecretInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JWTAudienceSecret.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JWTAudienceSecret) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jwtAudienceSecretUpdateCacheMut.RLock()
	cache, cached := jwtAudienceSecretUpdateCache[key]
	jwtAudienceSecretUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jwtAudienceSecretAllColumns,
			jwtAudienceSecretPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("model: unable to update jwt_audience_secret, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `jwt_audience_secret` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, jwtAudienceSecretPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jwtAudienceSecretType, jwtAudienceSecretMapping, append(wl, jwtAudienceSecretPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update jwt_audience_secret row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for jwt_audience_secret")
	}

	if !cached {
		jwtAudienceSecretUpdateCacheMut.Lock()
		jwtAudienceSecretUpdateCache[key] = cache
		jwtAudienceSecretUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jwtAudienceSecretQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for jwt_audience_secret")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for jwt_audience_secret")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JWTAudienceSecretSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtAudienceSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `jwt_audience_secret` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jwtAudienceSecretPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in jwtAudienceSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all jwtAudienceSecret")
	}
	return rowsAff, nil
}

var mySQLJWTAudienceSecretUniqueColumns = []string{
	"jwt_audience_secret_id",
	"audience",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JWTAudienceSecret) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no jwt_audience_secret provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jwtAudienceSecretColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLJWTAudienceSecretUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jwtAudienceSecretUpsertCacheMut.RLock()
	cache, cached := jwtAudienceSecretUpsertCache[key]
	jwtAudienceSecretUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jwtAudienceSecretAllColumns,
			jwtAudienceSecretColumnsWithDefault,
			jwtAudienceSecretColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jwtAudienceSecretAllColumns,
			jwtAudienceSecretPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert jwt_audience_secret, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`jwt_audience_secret`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `jwt_audience_secret` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(jwtAudienceSecretType, jwtAudienceSecretMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jwtAudienceSecretType, jwtAudienceSecretMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for jwt_audience_secret")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JWTAudienceSecretID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jwtAudienceSecretMapping["jwt_audience_secret_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(jwtAudienceSecretType, jwtAudienceSecretMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for jwt_audience_secret")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for jwt_audience_secret")
	}

CacheNoHooks:
	if !cached {
		jwtAudienceSecretUpsertCacheMut.Lock()
		jwtAudienceSecretUpsertCache[key] = cache
		jwtAudienceSecretUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JWTAudienceSecret record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JWTAudienceSecret) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no JWTAudienceSecret provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jwtAudienceSecretPrimaryKeyMapping)
	sql := "DELETE FROM `jwt_audience_secret` WHERE `jwt_audience_secret_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from jwt_audience_secret")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for jwt_audience_secret")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jwtAudienceSecretQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no jwtAudienceSecretQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from jwt_audience_secret")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for jwt_audience_secret")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JWTAudienceSecretSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jwtAudienceSecretBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtAudienceSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `jwt_audience_secret` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jwtAudienceSecretPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from jwtAudienceSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for jwt_audience_secret")
	}

	if len(jwtAudienceSecretAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JWTAudienceSecret) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJWTAudienceSecret(ctx, exec, o.JWTAudienceSecretID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JWTAudienceSecretSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JWTAudienceSecretSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtAudienceSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `jwt_audience_secret`.* FROM `jwt_audience_secret` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jwtAudienceSecretPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in JWTAudienceSecretSlice")
	}

	*o = slice

	return nil
}

// JWTAudienceSecretExists checks if the JWTAudienceSecret row exists.
func JWTAudienceSecretExists(ctx context.Context, exec boil.ContextExecutor, jWTAudienceSecretID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `jwt_audience_secret` where `jwt_audience_secret_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, jWTAudienceSecretID)
	}
	row := exec.QueryRowContext(ctx, sql, jWTAudienceSecretID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if jwt_audience_secret exists")
	}

	return exists, nil
}
