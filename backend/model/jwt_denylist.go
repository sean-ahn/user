// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JWTDenylist is an object representing the database table.
type JWTDenylist struct { // JWT denylist 아이디
	JWTDenylistID int `boil:"jwt_denylist_id" json:"jwt_denylist_id" toml:"jwt_denylist_id" yaml:"jwt_denylist_id"`
	// 유저 아이디
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// jti(JWT ID) claim
	Jti       string    `boil:"jti" json:"jti" toml:"jti" yaml:"jti"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *jwtDenylistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jwtDenylistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JWTDenylistColumns = struct {
	JWTDenylistID string
	UserID        string
	Jti           string
	CreatedAt     string
	UpdatedAt     string
}{
	JWTDenylistID: "jwt_denylist_id",
	UserID:        "user_id",
	Jti:           "jti",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var JWTDenylistTableColumns = struct {
	JWTDenylistID string
	UserID        string
	Jti           string
	CreatedAt     string
	UpdatedAt     string
}{
	JWTDenylistID: "jwt_denylist.jwt_denylist_id",
	UserID:        "jwt_denylist.user_id",
	Jti:           "jwt_denylist.jti",
	CreatedAt:     "jwt_denylist.created_at",
	UpdatedAt:     "jwt_denylist.updated_at",
}

// Generated where

var JWTDenylistWhere = struct {
	JWTDenylistID whereHelperint
	UserID        whereHelperint
	Jti           whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	JWTDenylistID: whereHelperint{field: "`jwt_denylist`.`jwt_denylist_id`"},
	UserID:        whereHelperint{field: "`jwt_denylist`.`user_id`"},
	Jti:           whereHelperstring{field: "`jwt_denylist`.`jti`"},
	CreatedAt:     whereHelpertime_Time{field: "`jwt_denylist`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`jwt_denylist`.`updated_at`"},
}

// JWTDenylistRels is where relationship names are stored.
var JWTDenylistRels = struct {
}{}

// jwtDenylistR is where relationships are stored.
type jwtDenylistR struct {
}

// NewStruct creates a new relationship struct
func (*jwtDenylistR) NewStruct() *jwtDenylistR {
	return &jwtDenylistR{}
}

// jwtDenylistL is where Load methods for each relationship are stored.
type jwtDenylistL struct{}

var (
	jwtDenylistAllColumns            = []string{"jwt_denylist_id", "user_id", "jti", "created_at", "updated_at"}
	jwtDenylistColumnsWithoutDefault = []string{"user_id", "jti"}
	jwtDenylistColumnsWithDefault    = []string{"jwt_denylist_id", "created_at", "updated_at"}
	jwtDenylistPrimaryKeyColumns     = []string{"jwt_denylist_id"}
)

type (
	// JWTDenylistSlice is an alias for a slice of pointers to JWTDenylist.
	// This should almost always be used instead of []JWTDenylist.
	JWTDenylistSlice []*JWTDenylist
	// JWTDenylistHook is the signature for custom JWTDenylist hook methods
	JWTDenylistHook func(context.Context, boil.ContextExecutor, *JWTDenylist) error

	jwtDenylistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jwtDenylistType                 = reflect.TypeOf(&JWTDenylist{})
	jwtDenylistMapping              = queries.MakeStructMapping(jwtDenylistType)
	jwtDenylistPrimaryKeyMapping, _ = queries.BindMapping(jwtDenylistType, jwtDenylistMapping, jwtDenylistPrimaryKeyColumns)
	jwtDenylistInsertCacheMut       sync.RWMutex
	jwtDenylistInsertCache          = make(map[string]insertCache)
	jwtDenylistUpdateCacheMut       sync.RWMutex
	jwtDenylistUpdateCache          = make(map[string]updateCache)
	jwtDenylistUpsertCacheMut       sync.RWMutex
	jwtDenylistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jwtDenylistBeforeInsertHooks []JWTDenylistHook
var jwtDenylistBeforeUpdateHooks []JWTDenylistHook
var jwtDenylistBeforeDeleteHooks []JWTDenylistHook
var jwtDenylistBeforeUpsertHooks []JWTDenylistHook

var jwtDenylistAfterInsertHooks []JWTDenylistHook
var jwtDenylistAfterSelectHooks []JWTDenylistHook
var jwtDenylistAfterUpdateHooks []JWTDenylistHook
var jwtDenylistAfterDeleteHooks []JWTDenylistHook
var jwtDenylistAfterUpsertHooks []JWTDenylistHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JWTDenylist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JWTDenylist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JWTDenylist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JWTDenylist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JWTDenylist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JWTDenylist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JWTDenylist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JWTDenylist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JWTDenylist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtDenylistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJWTDenylistHook registers your hook function for all future operations.
func AddJWTDenylistHook(hookPoint boil.HookPoint, jwtDenylistHook JWTDenylistHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		jwtDenylistBeforeInsertHooks = append(jwtDenylistBeforeInsertHooks, jwtDenylistHook)
	case boil.BeforeUpdateHook:
		jwtDenylistBeforeUpdateHooks = append(jwtDenylistBeforeUpdateHooks, jwtDenylistHook)
	case boil.BeforeDeleteHook:
		jwtDenylistBeforeDeleteHooks = append(jwtDenylistBeforeDeleteHooks, jwtDenylistHook)
	case boil.BeforeUpsertHook:
		jwtDenylistBeforeUpsertHooks = append(jwtDenylistBeforeUpsertHooks, jwtDenylistHook)
	case boil.AfterInsertHook:
		jwtDenylistAfterInsertHooks = append(jwtDenylistAfterInsertHooks, jwtDenylistHook)
	case boil.AfterSelectHook:
		jwtDenylistAfterSelectHooks = append(jwtDenylistAfterSelectHooks, jwtDenylistHook)
	case boil.AfterUpdateHook:
		jwtDenylistAfterUpdateHooks = append(jwtDenylistAfterUpdateHooks, jwtDenylistHook)
	case boil.AfterDeleteHook:
		jwtDenylistAfterDeleteHooks = append(jwtDenylistAfterDeleteHooks, jwtDenylistHook)
	case boil.AfterUpsertHook:
		jwtDenylistAfterUpsertHooks = append(jwtDenylistAfterUpsertHooks, jwtDenylistHook)
	}
}

// One returns a single jwtDenylist record from the query.
func (q jwtDenylistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JWTDenylist, error) {
	o := &JWTDenylist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for jwt_denylist")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JWTDenylist records from the query.
func (q jwtDenylistQuery) All(ctx context.Context, exec boil.ContextExecutor) (JWTDenylistSlice, error) {
	var o []*JWTDenylist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to JWTDenylist slice")
	}

	if len(jwtDenylistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JWTDenylist records in the query.
func (q jwtDenylistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count jwt_denylist rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jwtDenylistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if jwt_denylist exists")
	}

	return count > 0, nil
}

// JWTDenylists retrieves all the records using an executor.
func JWTDenylists(mods ...qm.QueryMod) jwtDenylistQuery {
	mods = append(mods, qm.From("`jwt_denylist`"))
	return jwtDenylistQuery{NewQuery(mods...)}
}

// FindJWTDenylist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJWTDenylist(ctx context.Context, exec boil.ContextExecutor, jWTDenylistID int, selectCols ...string) (*JWTDenylist, error) {
	jwtDenylistObj := &JWTDenylist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `jwt_denylist` where `jwt_denylist_id`=?", sel,
	)

	q := queries.Raw(query, jWTDenylistID)

	err := q.Bind(ctx, exec, jwtDenylistObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from jwt_denylist")
	}

	if err = jwtDenylistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return jwtDenylistObj, err
	}

	return jwtDenylistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JWTDenylist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no jwt_denylist provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jwtDenylistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jwtDenylistInsertCacheMut.RLock()
	cache, cached := jwtDenylistInsertCache[key]
	jwtDenylistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jwtDenylistAllColumns,
			jwtDenylistColumnsWithDefault,
			jwtDenylistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jwtDenylistType, jwtDenylistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jwtDenylistType, jwtDenylistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `jwt_denylist` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `jwt_denylist` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `jwt_denylist` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, jwtDenylistPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into jwt_denylist")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JWTDenylistID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jwtDenylistMapping["jwt_denylist_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.JWTDenylistID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for jwt_denylist")
	}

CacheNoHooks:
	if !cached {
		jwtDenylistInsertCacheMut.Lock()
		jwtDenylistInsertCache[key] = cache
		jwtDenylistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JWTDenylist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JWTDenylist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jwtDenylistUpdateCacheMut.RLock()
	cache, cached := jwtDenylistUpdateCache[key]
	jwtDenylistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jwtDenylistAllColumns,
			jwtDenylistPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("model: unable to update jwt_denylist, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `jwt_denylist` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, jwtDenylistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jwtDenylistType, jwtDenylistMapping, append(wl, jwtDenylistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update jwt_denylist row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for jwt_denylist")
	}

	if !cached {
		jwtDenylistUpdateCacheMut.Lock()
		jwtDenylistUpdateCache[key] = cache
		jwtDenylistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jwtDenylistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for jwt_denylist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for jwt_denylist")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JWTDenylistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtDenylistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `jwt_denylist` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jwtDenylistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in jwtDenylist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all jwtDenylist")
	}
	return rowsAff, nil
}

var mySQLJWTDenylistUniqueColumns = []string{
	"jwt_denylist_id",
	"jti",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JWTDenylist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no jwt_denylist provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jwtDenylistColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLJWTDenylistUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jwtDenylistUpsertCacheMut.RLock()
	cache, cached := jwtDenylistUpsertCache[key]
	jwtDenylistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jwtDenylistAllColumns,
			jwtDenylistColumnsWithDefault,
			jwtDenylistColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jwtDenylistAllColumns,
			jwtDenylistPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert jwt_denylist, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`jwt_denylist`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `jwt_denylist` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(jwtDenylistType, jwtDenylistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jwtDenylistType, jwtDenylistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for jwt_denylist")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JWTDenylistID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jwtDenylistMapping["jwt_denylist_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(jwtDenylistType, jwtDenylistMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for jwt_denylist")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for jwt_denylist")
	}

CacheNoHooks:
	if !cached {
		jwtDenylistUpsertCacheMut.Lock()
		jwtDenylistUpsertCache[key] = cache
		jwtDenylistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JWTDenylist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JWTDenylist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no JWTDenylist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jwtDenylistPrimaryKeyMapping)
	sql := "DELETE FROM `jwt_denylist` WHERE `jwt_denylist_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from jwt_denylist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for jwt_denylist")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jwtDenylistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no jwtDenylistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from jwt_denylist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for jwt_denylist")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JWTDenylistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jwtDenylistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtDenylistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `jwt_denylist` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jwtDenylistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from jwtDenylist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for jwt_denylist")
	}

	if len(jwtDenylistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JWTDenylist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJWTDenylist(ctx, exec, o.JWTDenylistID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JWTDenylistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JWTDenylistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtDenylistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `jwt_denylist`.* FROM `jwt_denylist` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jwtDenylistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in JWTDenylistSlice")
	}

	*o = slice

	return nil
}

// JWTDenylistExists checks if the JWTDenylist row exists.
func JWTDenylistExists(ctx context.Context, exec boil.ContextExecutor, jWTDenylistID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `jwt_denylist` where `jwt_denylist_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, jWTDenylistID)
	}
	row := exec.QueryRowContext(ctx, sql, jWTDenylistID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if jwt_denylist exists")
	}

	return exists, nil
}
