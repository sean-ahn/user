// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SMSOtpVerification is an object representing the database table.
type SMSOtpVerification struct { // SMS OTP 인증 아이디
	SMSOtpVerificationID int `boil:"sms_otp_verification_id" json:"sms_otp_verification_id" toml:"sms_otp_verification_id" yaml:"sms_otp_verification_id"`
	// 인증 토큰
	VerificationToken string `boil:"verification_token" json:"verification_token" toml:"verification_token" yaml:"verification_token"`
	// 핸드폰 번호
	PhoneNumber string `boil:"phone_number" json:"phone_number" toml:"phone_number" yaml:"phone_number"`
	// 인증 코드
	OtpCode string `boil:"otp_code" json:"otp_code" toml:"otp_code" yaml:"otp_code"`
	// 검증 시도 횟수
	VerificationTrials int `boil:"verification_trials" json:"verification_trials" toml:"verification_trials" yaml:"verification_trials"`
	// 인증 여부
	IsVerified bool `boil:"is_verified" json:"is_verified" toml:"is_verified" yaml:"is_verified"`
	// 만료 일시
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *smsOtpVerificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L smsOtpVerificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SMSOtpVerificationColumns = struct {
	SMSOtpVerificationID string
	VerificationToken    string
	PhoneNumber          string
	OtpCode              string
	VerificationTrials   string
	IsVerified           string
	ExpiresAt            string
	CreatedAt            string
	UpdatedAt            string
}{
	SMSOtpVerificationID: "sms_otp_verification_id",
	VerificationToken:    "verification_token",
	PhoneNumber:          "phone_number",
	OtpCode:              "otp_code",
	VerificationTrials:   "verification_trials",
	IsVerified:           "is_verified",
	ExpiresAt:            "expires_at",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
}

var SMSOtpVerificationTableColumns = struct {
	SMSOtpVerificationID string
	VerificationToken    string
	PhoneNumber          string
	OtpCode              string
	VerificationTrials   string
	IsVerified           string
	ExpiresAt            string
	CreatedAt            string
	UpdatedAt            string
}{
	SMSOtpVerificationID: "sms_otp_verification.sms_otp_verification_id",
	VerificationToken:    "sms_otp_verification.verification_token",
	PhoneNumber:          "sms_otp_verification.phone_number",
	OtpCode:              "sms_otp_verification.otp_code",
	VerificationTrials:   "sms_otp_verification.verification_trials",
	IsVerified:           "sms_otp_verification.is_verified",
	ExpiresAt:            "sms_otp_verification.expires_at",
	CreatedAt:            "sms_otp_verification.created_at",
	UpdatedAt:            "sms_otp_verification.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var SMSOtpVerificationWhere = struct {
	SMSOtpVerificationID whereHelperint
	VerificationToken    whereHelperstring
	PhoneNumber          whereHelperstring
	OtpCode              whereHelperstring
	VerificationTrials   whereHelperint
	IsVerified           whereHelperbool
	ExpiresAt            whereHelpertime_Time
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
}{
	SMSOtpVerificationID: whereHelperint{field: "`sms_otp_verification`.`sms_otp_verification_id`"},
	VerificationToken:    whereHelperstring{field: "`sms_otp_verification`.`verification_token`"},
	PhoneNumber:          whereHelperstring{field: "`sms_otp_verification`.`phone_number`"},
	OtpCode:              whereHelperstring{field: "`sms_otp_verification`.`otp_code`"},
	VerificationTrials:   whereHelperint{field: "`sms_otp_verification`.`verification_trials`"},
	IsVerified:           whereHelperbool{field: "`sms_otp_verification`.`is_verified`"},
	ExpiresAt:            whereHelpertime_Time{field: "`sms_otp_verification`.`expires_at`"},
	CreatedAt:            whereHelpertime_Time{field: "`sms_otp_verification`.`created_at`"},
	UpdatedAt:            whereHelpertime_Time{field: "`sms_otp_verification`.`updated_at`"},
}

// SMSOtpVerificationRels is where relationship names are stored.
var SMSOtpVerificationRels = struct {
}{}

// smsOtpVerificationR is where relationships are stored.
type smsOtpVerificationR struct {
}

// NewStruct creates a new relationship struct
func (*smsOtpVerificationR) NewStruct() *smsOtpVerificationR {
	return &smsOtpVerificationR{}
}

// smsOtpVerificationL is where Load methods for each relationship are stored.
type smsOtpVerificationL struct{}

var (
	smsOtpVerificationAllColumns            = []string{"sms_otp_verification_id", "verification_token", "phone_number", "otp_code", "verification_trials", "is_verified", "expires_at", "created_at", "updated_at"}
	smsOtpVerificationColumnsWithoutDefault = []string{"verification_token", "phone_number", "otp_code", "verification_trials", "is_verified", "expires_at"}
	smsOtpVerificationColumnsWithDefault    = []string{"sms_otp_verification_id", "created_at", "updated_at"}
	smsOtpVerificationPrimaryKeyColumns     = []string{"sms_otp_verification_id"}
)

type (
	// SMSOtpVerificationSlice is an alias for a slice of pointers to SMSOtpVerification.
	// This should almost always be used instead of []SMSOtpVerification.
	SMSOtpVerificationSlice []*SMSOtpVerification
	// SMSOtpVerificationHook is the signature for custom SMSOtpVerification hook methods
	SMSOtpVerificationHook func(context.Context, boil.ContextExecutor, *SMSOtpVerification) error

	smsOtpVerificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	smsOtpVerificationType                 = reflect.TypeOf(&SMSOtpVerification{})
	smsOtpVerificationMapping              = queries.MakeStructMapping(smsOtpVerificationType)
	smsOtpVerificationPrimaryKeyMapping, _ = queries.BindMapping(smsOtpVerificationType, smsOtpVerificationMapping, smsOtpVerificationPrimaryKeyColumns)
	smsOtpVerificationInsertCacheMut       sync.RWMutex
	smsOtpVerificationInsertCache          = make(map[string]insertCache)
	smsOtpVerificationUpdateCacheMut       sync.RWMutex
	smsOtpVerificationUpdateCache          = make(map[string]updateCache)
	smsOtpVerificationUpsertCacheMut       sync.RWMutex
	smsOtpVerificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var smsOtpVerificationBeforeInsertHooks []SMSOtpVerificationHook
var smsOtpVerificationBeforeUpdateHooks []SMSOtpVerificationHook
var smsOtpVerificationBeforeDeleteHooks []SMSOtpVerificationHook
var smsOtpVerificationBeforeUpsertHooks []SMSOtpVerificationHook

var smsOtpVerificationAfterInsertHooks []SMSOtpVerificationHook
var smsOtpVerificationAfterSelectHooks []SMSOtpVerificationHook
var smsOtpVerificationAfterUpdateHooks []SMSOtpVerificationHook
var smsOtpVerificationAfterDeleteHooks []SMSOtpVerificationHook
var smsOtpVerificationAfterUpsertHooks []SMSOtpVerificationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SMSOtpVerification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SMSOtpVerification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SMSOtpVerification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SMSOtpVerification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SMSOtpVerification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SMSOtpVerification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SMSOtpVerification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SMSOtpVerification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SMSOtpVerification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range smsOtpVerificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSMSOtpVerificationHook registers your hook function for all future operations.
func AddSMSOtpVerificationHook(hookPoint boil.HookPoint, smsOtpVerificationHook SMSOtpVerificationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		smsOtpVerificationBeforeInsertHooks = append(smsOtpVerificationBeforeInsertHooks, smsOtpVerificationHook)
	case boil.BeforeUpdateHook:
		smsOtpVerificationBeforeUpdateHooks = append(smsOtpVerificationBeforeUpdateHooks, smsOtpVerificationHook)
	case boil.BeforeDeleteHook:
		smsOtpVerificationBeforeDeleteHooks = append(smsOtpVerificationBeforeDeleteHooks, smsOtpVerificationHook)
	case boil.BeforeUpsertHook:
		smsOtpVerificationBeforeUpsertHooks = append(smsOtpVerificationBeforeUpsertHooks, smsOtpVerificationHook)
	case boil.AfterInsertHook:
		smsOtpVerificationAfterInsertHooks = append(smsOtpVerificationAfterInsertHooks, smsOtpVerificationHook)
	case boil.AfterSelectHook:
		smsOtpVerificationAfterSelectHooks = append(smsOtpVerificationAfterSelectHooks, smsOtpVerificationHook)
	case boil.AfterUpdateHook:
		smsOtpVerificationAfterUpdateHooks = append(smsOtpVerificationAfterUpdateHooks, smsOtpVerificationHook)
	case boil.AfterDeleteHook:
		smsOtpVerificationAfterDeleteHooks = append(smsOtpVerificationAfterDeleteHooks, smsOtpVerificationHook)
	case boil.AfterUpsertHook:
		smsOtpVerificationAfterUpsertHooks = append(smsOtpVerificationAfterUpsertHooks, smsOtpVerificationHook)
	}
}

// One returns a single smsOtpVerification record from the query.
func (q smsOtpVerificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SMSOtpVerification, error) {
	o := &SMSOtpVerification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for sms_otp_verification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SMSOtpVerification records from the query.
func (q smsOtpVerificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SMSOtpVerificationSlice, error) {
	var o []*SMSOtpVerification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to SMSOtpVerification slice")
	}

	if len(smsOtpVerificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SMSOtpVerification records in the query.
func (q smsOtpVerificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count sms_otp_verification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q smsOtpVerificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if sms_otp_verification exists")
	}

	return count > 0, nil
}

// SMSOtpVerifications retrieves all the records using an executor.
func SMSOtpVerifications(mods ...qm.QueryMod) smsOtpVerificationQuery {
	mods = append(mods, qm.From("`sms_otp_verification`"))
	return smsOtpVerificationQuery{NewQuery(mods...)}
}

// FindSMSOtpVerification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSMSOtpVerification(ctx context.Context, exec boil.ContextExecutor, sMSOtpVerificationID int, selectCols ...string) (*SMSOtpVerification, error) {
	smsOtpVerificationObj := &SMSOtpVerification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sms_otp_verification` where `sms_otp_verification_id`=?", sel,
	)

	q := queries.Raw(query, sMSOtpVerificationID)

	err := q.Bind(ctx, exec, smsOtpVerificationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from sms_otp_verification")
	}

	if err = smsOtpVerificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return smsOtpVerificationObj, err
	}

	return smsOtpVerificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SMSOtpVerification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no sms_otp_verification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(smsOtpVerificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	smsOtpVerificationInsertCacheMut.RLock()
	cache, cached := smsOtpVerificationInsertCache[key]
	smsOtpVerificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			smsOtpVerificationAllColumns,
			smsOtpVerificationColumnsWithDefault,
			smsOtpVerificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(smsOtpVerificationType, smsOtpVerificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(smsOtpVerificationType, smsOtpVerificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sms_otp_verification` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sms_otp_verification` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sms_otp_verification` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, smsOtpVerificationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into sms_otp_verification")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SMSOtpVerificationID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == smsOtpVerificationMapping["sms_otp_verification_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SMSOtpVerificationID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for sms_otp_verification")
	}

CacheNoHooks:
	if !cached {
		smsOtpVerificationInsertCacheMut.Lock()
		smsOtpVerificationInsertCache[key] = cache
		smsOtpVerificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SMSOtpVerification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SMSOtpVerification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	smsOtpVerificationUpdateCacheMut.RLock()
	cache, cached := smsOtpVerificationUpdateCache[key]
	smsOtpVerificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			smsOtpVerificationAllColumns,
			smsOtpVerificationPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("model: unable to update sms_otp_verification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sms_otp_verification` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, smsOtpVerificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(smsOtpVerificationType, smsOtpVerificationMapping, append(wl, smsOtpVerificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update sms_otp_verification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for sms_otp_verification")
	}

	if !cached {
		smsOtpVerificationUpdateCacheMut.Lock()
		smsOtpVerificationUpdateCache[key] = cache
		smsOtpVerificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q smsOtpVerificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for sms_otp_verification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for sms_otp_verification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SMSOtpVerificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), smsOtpVerificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sms_otp_verification` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, smsOtpVerificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in smsOtpVerification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all smsOtpVerification")
	}
	return rowsAff, nil
}

var mySQLSMSOtpVerificationUniqueColumns = []string{
	"sms_otp_verification_id",
	"verification_token",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SMSOtpVerification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no sms_otp_verification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(smsOtpVerificationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSMSOtpVerificationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	smsOtpVerificationUpsertCacheMut.RLock()
	cache, cached := smsOtpVerificationUpsertCache[key]
	smsOtpVerificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			smsOtpVerificationAllColumns,
			smsOtpVerificationColumnsWithDefault,
			smsOtpVerificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			smsOtpVerificationAllColumns,
			smsOtpVerificationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert sms_otp_verification, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sms_otp_verification`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sms_otp_verification` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(smsOtpVerificationType, smsOtpVerificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(smsOtpVerificationType, smsOtpVerificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for sms_otp_verification")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SMSOtpVerificationID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == smsOtpVerificationMapping["sms_otp_verification_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(smsOtpVerificationType, smsOtpVerificationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for sms_otp_verification")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for sms_otp_verification")
	}

CacheNoHooks:
	if !cached {
		smsOtpVerificationUpsertCacheMut.Lock()
		smsOtpVerificationUpsertCache[key] = cache
		smsOtpVerificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SMSOtpVerification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SMSOtpVerification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no SMSOtpVerification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), smsOtpVerificationPrimaryKeyMapping)
	sql := "DELETE FROM `sms_otp_verification` WHERE `sms_otp_verification_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from sms_otp_verification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for sms_otp_verification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q smsOtpVerificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no smsOtpVerificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from sms_otp_verification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for sms_otp_verification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SMSOtpVerificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(smsOtpVerificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), smsOtpVerificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sms_otp_verification` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, smsOtpVerificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from smsOtpVerification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for sms_otp_verification")
	}

	if len(smsOtpVerificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SMSOtpVerification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSMSOtpVerification(ctx, exec, o.SMSOtpVerificationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SMSOtpVerificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SMSOtpVerificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), smsOtpVerificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sms_otp_verification`.* FROM `sms_otp_verification` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, smsOtpVerificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in SMSOtpVerificationSlice")
	}

	*o = slice

	return nil
}

// SMSOtpVerificationExists checks if the SMSOtpVerification row exists.
func SMSOtpVerificationExists(ctx context.Context, exec boil.ContextExecutor, sMSOtpVerificationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sms_otp_verification` where `sms_otp_verification_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sMSOtpVerificationID)
	}
	row := exec.QueryRowContext(ctx, sql, sMSOtpVerificationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if sms_otp_verification exists")
	}

	return exists, nil
}
