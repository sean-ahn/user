// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sean-ahn/user/proto/gen/go/sms/v1 (interfaces: SmsServiceClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	smsv1 "github.com/sean-ahn/user/proto/gen/go/sms/v1"
)

// MockSmsServiceClient is a mock of SmsServiceClient interface.
type MockSmsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSmsServiceClientMockRecorder
}

// MockSmsServiceClientMockRecorder is the mock recorder for MockSmsServiceClient.
type MockSmsServiceClientMockRecorder struct {
	mock *MockSmsServiceClient
}

// NewMockSmsServiceClient creates a new mock instance.
func NewMockSmsServiceClient(ctrl *gomock.Controller) *MockSmsServiceClient {
	mock := &MockSmsServiceClient{ctrl: ctrl}
	mock.recorder = &MockSmsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsServiceClient) EXPECT() *MockSmsServiceClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSmsServiceClient) Send(arg0 context.Context, arg1 *smsv1.SendRequest, arg2 ...grpc.CallOption) (*smsv1.SendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*smsv1.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSmsServiceClientMockRecorder) Send(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSmsServiceClient)(nil).Send), varargs...)
}
