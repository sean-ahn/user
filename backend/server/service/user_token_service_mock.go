// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sean-ahn/user/backend/server/service (interfaces: UserTokenService)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/sean-ahn/user/backend/model"
)

// MockUserTokenService is a mock of UserTokenService interface.
type MockUserTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockUserTokenServiceMockRecorder
}

// MockUserTokenServiceMockRecorder is the mock recorder for MockUserTokenService.
type MockUserTokenServiceMockRecorder struct {
	mock *MockUserTokenService
}

// NewMockUserTokenService creates a new mock instance.
func NewMockUserTokenService(ctrl *gomock.Controller) *MockUserTokenService {
	mock := &MockUserTokenService{ctrl: ctrl}
	mock.recorder = &MockUserTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTokenService) EXPECT() *MockUserTokenServiceMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockUserTokenService) Issue(arg0 context.Context, arg1 *model.User) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Issue indicates an expected call of Issue.
func (mr *MockUserTokenServiceMockRecorder) Issue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockUserTokenService)(nil).Issue), arg0, arg1)
}

// Refresh mocks base method.
func (m *MockUserTokenService) Refresh(arg0 context.Context, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockUserTokenServiceMockRecorder) Refresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockUserTokenService)(nil).Refresh), arg0, arg1)
}

// Revoke mocks base method.
func (m *MockUserTokenService) Revoke(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockUserTokenServiceMockRecorder) Revoke(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockUserTokenService)(nil).Revoke), arg0, arg1)
}

// RevokeAll mocks base method.
func (m *MockUserTokenService) RevokeAll(arg0 context.Context, arg1 *model.User, arg2 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAll indicates an expected call of RevokeAll.
func (mr *MockUserTokenServiceMockRecorder) RevokeAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAll", reflect.TypeOf((*MockUserTokenService)(nil).RevokeAll), arg0, arg1, arg2)
}
